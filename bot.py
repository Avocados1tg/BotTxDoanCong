import logging
import os
import asyncio
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ChatAction
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# L·∫•y token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng (Railway)
TOKEN = os.environ.get('BOT_TOKEN')
if not TOKEN:
    raise ValueError('BOT_TOKEN kh√¥ng ƒë∆∞·ª£c set! H√£y th√™m v√†o bi·∫øn m√¥i tr∆∞·ªùng.')

# B·∫≠t logging ƒë·ªÉ debug (t√πy ch·ªçn)
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# T√πy ch·ªânh: Danh s√°ch emoji Dice
DICE_EMOJIS = ['üé≤', 'üéØ']

# T√πy ch·ªânh: URL ho·∫∑c file_id GIF animation
CUSTOM_GIF_URL = 'https://media.tenor.com/5oN8f0y3y0AAAAAC/dice-roll.gif'

# Balance m·∫∑c ƒë·ªãnh
DEFAULT_BALANCE = 10000.0  # 10.000 VND (float ƒë·ªÉ h·ªó tr·ª£ th·∫≠p ph√¢n)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'balance' not in context.user_data:
        context.user_data['balance'] = DEFAULT_BALANCE
    await update.message.reply_text(f'Ch√†o m·ª´ng! Bot TX v·ªõi n√∫t b·∫•m v√† ti·ªÅn ·∫£o VND (S·ªë d∆∞: {int(context.user_data["balance"])} VND).\nG√µ /play ƒë·ªÉ ch∆°i (t·ª∑ l·ªá 1:0.9). /balance xem ti·ªÅn. /reset reset ti·ªÅn.')

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    balance = context.user_data.get('balance', DEFAULT_BALANCE)
    await update.message.reply_text(f'S·ªë d∆∞ hi·ªán t·∫°i: {int(balance)} VND üí∞')

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['balance'] = DEFAULT_BALANCE
    await update.message.reply_text(f'ƒê√£ reset s·ªë d∆∞ v·ªÅ {int(DEFAULT_BALANCE)} VND!')

async def play(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'balance' not in context.user_data:
        context.user_data['balance'] = DEFAULT_BALANCE
    balance = context.user_data['balance']
    if balance <= 0:
        await update.message.reply_text('H·∫øt ti·ªÅn r·ªìi! G√µ /reset ƒë·ªÉ ch∆°i ti·∫øp.')
        return
    
    # T·∫°o n√∫t b·∫•m cho T√†i/X·ªâu
    keyboard = [
        [InlineKeyboardButton("T√†i üí∞", callback_data='bet_tai')],
        [InlineKeyboardButton("X·ªâu üé≤", callback_data='bet_xiu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('Ch·ªçn c∆∞·ª£c c·ªßa b·∫°n:', reply_markup=reply_markup)
    context.user_data['waiting_bet'] = True

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if context.user_data.get('waiting_bet'):
        bet = 't√†i' if query.data == 'bet_tai' else 'x·ªâu'
        context.user_data['bet'] = bet
        balance = context.user_data['balance']
        await query.edit_message_text(f'B√¢y gi·ªù g√µ s·ªë ti·ªÅn c∆∞·ª£c (VND, v√≠ d·ª•: 1000). S·ªë d∆∞ hi·ªán t·∫°i: {int(balance)} VND')
        # Ch·ªù message ti·∫øp theo cho c∆∞·ª£c
        context.user_data['waiting_amount'] = True
        del context.user_data['waiting_bet']

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('waiting_amount'):
        try:
            amount = float(update.message.text.strip())
            balance = context.user_data['balance']
            if amount <= 0 or amount > balance:
                await update.message.reply_text(f'C∆∞·ª£c kh√¥ng h·ª£p l·ªá! Ph·∫£i t·ª´ 1 ƒë·∫øn {int(balance)} VND.')
                return
            bet = context.user_data['bet']
            
            # Tr·ª´ ti·ªÅn c∆∞·ª£c tr∆∞·ªõc
            context.user_data['balance'] -= amount
            
            # B·∫Øt ƒë·∫ßu animation
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.RECORD_VIDEO)
            
            try:
                await context.bot.send_animation(
                    chat_id=update.effective_chat.id,
                    animation=CUSTOM_GIF_URL,
                    caption='ƒêang l·∫Øc x√∫c x·∫Øc... ‚è≥'
                )
                use_dice = False
            except Exception:
                use_dice = True
            
            if use_dice:
                dice_values = []
                for _ in range(3):
                    emoji = random.choice(DICE_EMOJIS)
                    dice_msg = await context.bot.send_dice(
                        chat_id=update.effective_chat.id,
                        emoji=emoji
                    )
                    await asyncio.sleep(0.5)
                    dice_values.append(dice_msg.dice.value)
            else:
                dice_values = [random.randint(1, 6) for _ in range(3)]
            
            total = sum(dice_values)
            result = 'T√†i' if total >= 11 else 'X·ªâu'
            win = (bet == result.lower())
            
            message = f'üé≤ X√∫c x·∫Øc: {dice_values[0]}, {dice_values[1]}, {dice_values[2]}\nT·ªïng: {total}\nK·∫øt qu·∫£: {result}\n'
            if win:
                win_amount = amount * 0.9
                context.user_data['balance'] += amount + win_amount  # + g·ªëc + th·∫Øng (1:0.9)
                message += f'B·∫°n th·∫Øng! +{int(win_amount)} VND\nS·ªë d∆∞ m·ªõi: {int(context.user_data["balance"])} VND üéâ\nCh∆°i ti·∫øp /play'
            else:
                message += f'B·∫°n thua! -{int(amount)} VND\nS·ªë d∆∞ m·ªõi: {int(context.user_data["balance"])} VND üòî\nTh·ª≠ l·∫°i /play'
            
            await update.message.reply_text(message)
            del context.user_data['waiting_amount']
            del context.user_data['bet']
        except ValueError:
            await update.message.reply_text('Sai! G√µ s·ªë h·ª£p l·ªá cho ti·ªÅn c∆∞·ª£c (v√≠ d·ª•: 1000).')

def main():
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('play', play))
    application.add_handler(CommandHandler('balance', balance))
    application.add_handler(CommandHandler('reset', reset))
    application.add_handler(CallbackQueryHandler(button_callback, pattern='^bet_'))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print('Bot ƒëang ch·∫°y v·ªõi n√∫t b·∫•m, ti·ªÅn ·∫£o VND v√† t·ª∑ l·ªá 1:0.9...')
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()