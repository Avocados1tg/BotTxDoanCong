import logging
import random
import os
import sqlite3
import asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Voice
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

import yt_dlp

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

if not TOKEN:
    print("L·ªói: Kh√¥ng t√¨m th·∫•y TELEGRAM_BOT_TOKEN.")
    exit(1)

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# DB
DB_FILE = 'yt_music.db'
conn = sqlite3.connect(DB_FILE, check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS queues (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    chat_id INTEGER,
    song_title TEXT,
    song_url TEXT,
    added_by INTEGER,
    added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    played BOOLEAN DEFAULT FALSE
)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    daily_bonus_claimed DATE DEFAULT NULL
)''')
conn.commit()

def get_queue(chat_id):
    cursor.execute("SELECT song_title, song_url FROM queues WHERE chat_id = ? AND played = FALSE ORDER BY added_at LIMIT 1", (chat_id,))
    row = cursor.fetchone()
    if row:
        return row[0], row[1]
    return None, None

def add_to_queue(chat_id, title, url, added_by):
    cursor.execute("INSERT INTO queues (chat_id, song_title, song_url, added_by) VALUES (?, ?, ?, ?)", (chat_id, title, url, added_by))
    conn.commit()

def mark_played(chat_id):
    cursor.execute("UPDATE queues SET played = TRUE WHERE chat_id = ? AND played = FALSE ORDER BY added_at LIMIT 1", (chat_id,))
    conn.commit()

def clear_queue(chat_id):
    cursor.execute("DELETE FROM queues WHERE chat_id = ?", (chat_id,))
    conn.commit()

def can_claim_bonus(user_id):
    cursor.execute("SELECT daily_bonus_claimed FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if not row:
        return True
    last_date = datetime.strptime(row[0], '%Y-%m-%d').date()
    today = datetime.now().date()
    return last_date < today

def claim_bonus(user_id):
    bonus_title = random.choice(['Happy - Pharrell Williams', 'Shape of You - Ed Sheeran', 'Despacito - Luis Fonsi'])
    bonus_url = f"https://www.youtube.com/results?search_query={bonus_title.replace(' ', '+')}"
    cursor.execute("INSERT OR REPLACE INTO users (user_id, daily_bonus_claimed) VALUES (?, ?)", (user_id, datetime.now().date().strftime('%Y-%m-%d')))
    conn.commit()
    return bonus_title, bonus_url

async def search_yt_music(query, max_results=5):
    # Th√™m "nh·∫°c Vi·ªát" n·∫øu query ti·∫øng Vi·ªát
    if any(char in '√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë' for char in query):
        query += ' nh·∫°c Vi·ªát'
    ydl_opts = {
        'quiet': True,
        'no_warnings': True,
        'extract_flat': True,
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        try:
            results = ydl.extract_info(f"ytsearch{max_results}:{query}", download=False)['entries']
            songs = []
            for entry in results:
                song_id = entry['id']
                songs.append({
                    'title': entry['title'],
                    'url': f"https://www.youtube.com/watch?v={song_id}",
                    'duration': entry.get('duration', 0)
                })
            return songs
        except Exception as e:
            logging.error(f"YT search error: {e}")
            return []

async def download_preview(url, title):
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': 'temp.%(ext)s',
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'ogg',
            'preferredquality': '64',
        }],
        'postprocessor_args': ['-ss', '0', '-t', '30'],
        'quiet': True,
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        try:
            info = ydl.extract_info(url, download=True)
            file_path = ydl.prepare_filename(info)
            return file_path, title
        except Exception as e:
            logging.error(f"Download error: {e}")
            return None, None

async def play_next_song(context, chat_id):
    title, url = get_queue(chat_id)
    if not title:
        return  # Kh√¥ng queue th√¨ d·ª´ng
    file_path, song_title = await download_preview(url, title)
    if file_path:
        try:
            with open(file_path, 'rb') as audio:
                await context.bot.send_voice(chat_id=chat_id, voice=audio, caption=f'üéµ **ƒêang ch∆°i: {song_title}** (preview 30s)')
            os.remove(file_path)
            mark_played(chat_id)
            # Ch·ªâ g·ªçi next n·∫øu c√≤n queue
            next_title, _ = get_queue(chat_id)
            if next_title:
                asyncio.create_task(play_next_song(context, chat_id))
        except Exception as e:
            logging.error(f"Send voice error: {e}")
            await context.bot.send_message(chat_id=chat_id, text=f'‚ùå **L·ªói play {song_title}!** G·ª≠i link YT: {url}')
            mark_played(chat_id)
            if get_queue(chat_id):
                asyncio.create_task(play_next_song(context, chat_id))
    else:
        await context.bot.send_message(chat_id=chat_id, text=f'‚ùå **L·ªói download {title}!** G·ª≠i link YT: {url}')
        mark_played(chat_id)
        if get_queue(chat_id):
            asyncio.create_task(play_next_song(context, chat_id))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
    conn.commit()
    keyboard = get_main_keyboard()
    welcome_msg = """
üéµ **Bot Nghe Nh·∫°c YT Si√™u Chill!** üéß

Ch√†o anh! Bot search YT, queue b√†i h√°t, play preview 30s.
G√µ /music <t√™n b√†i> ƒë·ªÉ b·∫Øt ƒë·∫ßu, ho·∫∑c n√∫t d∆∞·ªõi.
Daily bonus: 1 b√†i random mi·ªÖn ph√≠/ng√†y!

Ch·ªçn nh√© üòé
    """
    await update.message.reply_text(welcome_msg, parse_mode='Markdown', reply_markup=keyboard)

def get_main_keyboard():
    keyboard = [
        [InlineKeyboardButton("üîç Search YT", callback_data='music_search')],
        [InlineKeyboardButton("üìã Xem Queue", callback_data='music_queue')],
        [InlineKeyboardButton("‚è≠ Skip B√†i", callback_data='music_skip')],
        [InlineKeyboardButton("üéÅ Daily Bonus", callback_data='music_bonus')],
        [InlineKeyboardButton("üóëÔ∏è Clear Queue", callback_data='music_clear')],
        [InlineKeyboardButton("‚ÑπÔ∏è H∆∞·ªõng d·∫´n", callback_data='music_help')]
    ]
    return InlineKeyboardMarkup(keyboard)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    chat_id = query.message.chat_id

    if query.data == 'music_search':
        keyboard = [[InlineKeyboardButton("üîô Menu", callback_data='music_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(chat_id=chat_id, text='üîç **Search b√†i h√°t:**\nG√µ t√™n b√†i (v√≠ d·ª• "Shape of You") sau tin n√†y.', parse_mode='Markdown', reply_markup=reply_markup)
        context.user_data['waiting_search'] = True
        return

    if query.data == 'music_queue':
        queue = get_queue(chat_id)
        if not queue:
            msg = 'üìã **Queue tr·ªëng!**\nTh√™m b√†i h√°t ƒëi üéµ'
        else:
            msg = 'üìã **Queue hi·ªán t·∫°i:**\n' + '\n'.join(f'‚Ä¢ {title}' for title, _ in queue[:5]) + ('...\n(5+ b√†i)' if len(queue) > 5 else '')
        keyboard = [[InlineKeyboardButton("üîô Menu", callback_data='music_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(chat_id=chat_id, text=msg, parse_mode='Markdown', reply_markup=reply_markup)
        return

    if query.data == 'music_skip':
        title, _ = get_queue(chat_id)
        if title:
            mark_played(chat_id)
            await context.bot.send_message(chat_id=chat_id, text=f'‚è≠ **Skipped {title}!** Playing next...', reply_markup=get_menu_keyboard())
            asyncio.create_task(play_next_song(context, chat_id))
        else:
            await context.bot.send_message(chat_id=chat_id, text='‚è≠ **Kh√¥ng c√≥ b√†i n√†o ƒë·ªÉ skip!**', reply_markup=get_menu_keyboard())
        return

    if query.data == 'music_bonus':
        if can_claim_bonus(user_id):
            bonus_title, bonus_url = claim_bonus(user_id)
            add_to_queue(chat_id, bonus_title, bonus_url, user_id)
            await context.bot.send_message(chat_id=chat_id, text=f'üéÅ **Daily Bonus: {bonus_title}!** Added to queue.\nPlaying now...', reply_markup=get_menu_keyboard())
            asyncio.create_task(play_next_song(context, chat_id))
        else:
            await context.bot.send_message(chat_id=chat_id, text='üéÅ **Daily bonus h√¥m nay ƒë√£ nh·∫≠n r·ªìi!**\nMai quay l·∫°i nh√© üòä', reply_markup=get_menu_keyboard())
        return

    if query.data == 'music_clear':
        clear_queue(chat_id)
        await context.bot.send_message(chat_id=chat_id, text='üóëÔ∏è **Queue cleared!**', reply_markup=get_menu_keyboard())
        return

    if query.data == 'music_help':
        msg = """
‚ÑπÔ∏è **H∆∞·ªõng d·∫´n nghe nh·∫°c YT:**

‚Ä¢ **Search:** ·∫§n üîç ho·∫∑c /music <t√™n b√†i> > Ch·ªçn > Add queue + play preview 30s.
‚Ä¢ **Queue:** Xem danh s√°ch b√†i ch·ªù, play theo th·ª© t·ª±.
‚Ä¢ **Skip:** B·ªè b√†i hi·ªán t·∫°i, play b√†i sau.
‚Ä¢ **Daily:** Bonus 1 b√†i random mi·ªÖn ph√≠/ng√†y.
‚Ä¢ **Clear:** X√≥a queue.
‚Ä¢ L∆∞u √Ω: Preview 30s (free), full nghe tr√™n YT app. Kh√¥ng download full.

üîô *Menu*
        """
        keyboard = get_menu_keyboard()
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(chat_id=chat_id, text=msg, parse_mode='Markdown', reply_markup=reply_markup)
        return

    if query.data == 'music_menu':
        keyboard = get_main_keyboard()
        await context.bot.send_message(chat_id=chat_id, text='üéµ **Menu Nh·∫°c YT:**\nCh·ªçn ƒë·ªÉ search, play, queue...', parse_mode='Markdown', reply_markup=keyboard)
        return

    if query.data.startswith('music_add_'):
        parts = query.data.split('_', 3)
        url = parts[2]
        title = parts[3].replace("_", " ") if len(parts) > 3 else 'Unknown'
        add_to_queue(chat_id, title, url, user_id)
        await context.bot.send_message(chat_id=chat_id, text=f'üéµ **Added to queue: {title}**\nPlaying preview 30s...', reply_markup=get_menu_keyboard())
        asyncio.create_task(play_next_song(context, chat_id))
        return

async def music_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text('S·ª≠ d·ª•ng /music <t√™n b√†i h√°t>')
        return
    query_text = ' '.join(context.args)
    songs = await search_yt_music(query_text, 5)
    if not songs:
        await update.message.reply_text('‚ùå Kh√¥ng t√¨m th·∫•y! Th·ª≠ t·ª´ kh√≥a kh√°c.')
        return
    keyboard = []
    for song in songs:
        callback = f'music_add_{song["url"]}_{song["title"].replace(" ", "_")}'
        keyboard.append([InlineKeyboardButton(f"{song['title'][:30]}... ({song['duration']}s)", callback_data=callback)])
    keyboard.append([InlineKeyboardButton("üîô Menu", callback_data='music_menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    msg = 'üéµ **K·∫øt qu·∫£ search YT:**\nCh·ªçn b√†i ƒë·ªÉ add queue (preview 30s).'
    await update.message.reply_text(msg, parse_mode='Markdown', reply_markup=reply_markup)

async def handle_music_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'waiting_search' not in context.user_data:
        return
    query_text = update.message.text.strip()
    songs = await search_yt_music(query_text, 5)
    if not songs:
        await update.message.reply_text('‚ùå **Kh√¥ng t√¨m th·∫•y b√†i h√°t!** Th·ª≠ t·ª´ kh√≥a kh√°c.')
        return
    keyboard = []
    for song in songs:
        callback = f'music_add_{song["url"]}_{song["title"].replace(" ", "_")}'
        keyboard.append([InlineKeyboardButton(f"{song['title'][:30]}... ({song['duration']}s)", callback_data=callback)])
    keyboard.append([InlineKeyboardButton("üîô Menu", callback_data='music_menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    msg = 'üéµ **K·∫øt qu·∫£ search YT:**\nCh·ªçn b√†i ƒë·ªÉ add queue (preview 30s).'
    await update.message.reply_text(msg, parse_mode='Markdown', reply_markup=reply_markup)
    context.user_data.pop('waiting_search', None)

def get_menu_keyboard():
    keyboard = [[InlineKeyboardButton("üîô Menu", callback_data='music_menu')]]
    return InlineKeyboardMarkup(keyboard)

def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("music", music_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_music_search))
    print("Bot nghe nh·∫°c YT full ƒëang ch·∫°y... Ctrl+C d·ª´ng.")
    application.run_polling()

if __name__ == '__main__':
    main()