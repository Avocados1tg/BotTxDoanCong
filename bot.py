# bot_cobac_full.py
import os
import random
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters, ConversationHandler

BOT_TOKEN = os.environ.get("BOT_TOKEN")
DATA_FILE = "vnd_wallet.json"

# Tr·∫°ng th√°i Conversation
CHOOSING_GAME, BET_CHOICE, INPUT_BET, CHOOSING_OPTION = range(4)

# Load d·ªØ li·ªáu
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r") as f:
        users = json.load(f)
else:
    users = {}

def save_data():
    with open(DATA_FILE, "w") as f:
        json.dump(users, f)

# /cobac
async def cobac(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in users:
        users[user_id] = {"vnd": 1000000}  # b·∫Øt ƒë·∫ßu 1 tri·ªáu VND
        save_data()

    keyboard = [
        [InlineKeyboardButton("T√†i X·ªâu", callback_data="taixiu")],
        [InlineKeyboardButton("R√∫t B√†i", callback_data="rutbai")],
        [InlineKeyboardButton("Roulette", callback_data="roulette")],
        [InlineKeyboardButton("ƒêua X√∫c X·∫Øc", callback_data="dauxucxac")],
        [InlineKeyboardButton("B·∫ßu Cua", callback_data="baucua")],
        [InlineKeyboardButton("S·ªë d∆∞ VND", callback_data="score")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üé∞ Ch√†o m·ª´ng ƒë·∫øn Mini Casino! Ch·ªçn tr√≤ ch∆°i:", reply_markup=reply_markup)
    return CHOOSING_GAME

# Callback ch·ªçn tr√≤
async def game_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    game = query.data
    context.user_data["game"] = game

    if game == "score":
        await query.edit_message_text(f"S·ªë d∆∞ hi·ªán t·∫°i: {users[user_id]['vnd']:,} VND üí∞")
        return CHOOSING_GAME

    # Ch·ªçn m·ª©c c∆∞·ª£c
    keyboard = [
        [InlineKeyboardButton("50.000 VND", callback_data="50000"),
         InlineKeyboardButton("100.000 VND", callback_data="100000"),
         InlineKeyboardButton("200.000 VND", callback_data="200000")],
        [InlineKeyboardButton("Nh·∫≠p s·ªë kh√°c", callback_data="input")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(f"Ch·ªçn s·ªë VND c∆∞·ª£c cho {game}:", reply_markup=reply_markup)
    return BET_CHOICE

# Ch·ªçn m·ª©c c∆∞·ª£c s·∫µn ho·∫∑c nh·∫≠p s·ªë
async def bet_choice_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    choice = query.data

    if choice == "input":
        await query.edit_message_text("Nh·∫≠p s·ªë VND c∆∞·ª£c:")
        return INPUT_BET
    else:
        bet = int(choice)
        if bet > users[user_id]["vnd"]:
            await query.edit_message_text("‚ùå Kh√¥ng ƒë·ªß VND ƒë·ªÉ c∆∞·ª£c!")
            return CHOOSING_GAME
        context.user_data["bet"] = bet
        return await choose_option(update, context)

# Nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c
async def input_bet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    try:
        bet = int(update.message.text)
        if bet <=0 or bet > users[user_id]["vnd"]:
            await update.message.reply_text("‚ùå S·ªë VND kh√¥ng h·ª£p l·ªá ho·∫∑c v∆∞·ª£t qu√° s·ªë d∆∞.")
            return INPUT_BET
        context.user_data["bet"] = bet
        return await choose_option(update, context)
    except:
        await update.message.reply_text("‚ùå Vui l√≤ng nh·∫≠p s·ªë VND h·ª£p l·ªá.")
        return INPUT_BET

# Ch·ªçn ph∆∞∆°ng √°n trong tr√≤ ch∆°i
async def choose_option(update, context):
    user_id = str(update.effective_user.id)
    game = context.user_data["game"]

    # T·∫°o n√∫t cho t·ª´ng tr√≤
    if game == "taixiu":
        keyboard = [
            [InlineKeyboardButton("T√†i", callback_data="taixiu_tai"),
             InlineKeyboardButton("X·ªâu", callback_data="taixiu_xiu")]
        ]
    elif game == "rutbai":
        keyboard = [
            [InlineKeyboardButton("Cao", callback_data="rutbai_cao"),
             InlineKeyboardButton("Th·∫•p", callback_data="rutbai_thap")]
        ]
    elif game == "roulette":
        keyboard = [
            [InlineKeyboardButton("Red", callback_data="roulette_red"),
             InlineKeyboardButton("Black", callback_data="roulette_black")]
        ]
    elif game == "dauxucxac":
        keyboard = [
            [InlineKeyboardButton(str(i), callback_data=f"dauxucxac_{i}") for i in range(1,7)]
        ]
    elif game == "baucua":
        faces = ["nai","b·∫ßu","c√°","g√†","t√¥m","cua"]
        keyboard = [[InlineKeyboardButton(face, callback_data=f"baucua_{face}") for face in faces[:3]],
                    [InlineKeyboardButton(face, callback_data=f"baucua_{face}") for face in faces[3:]]]
        context.user_data["baucua_choices"] = []

    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        await update.callback_query.edit_message_text("Ch·ªçn ph∆∞∆°ng √°n:", reply_markup=reply_markup)
    else:
        await update.message.reply_text("Ch·ªçn ph∆∞∆°ng √°n:", reply_markup=reply_markup)

    return CHOOSING_OPTION

# X·ª≠ l√Ω l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi ch∆°i
async def option_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    game = context.user_data["game"]
    bet = context.user_data["bet"]
    data = query.data

    # T√†i X·ªâu
    if game=="taixiu" and data.startswith("taixiu_"):
        choice = data.split("_")[1]
        dice = [random.randint(1,6) for _ in range(3)]
        total = sum(dice)
        result = "t√†i" if 11<=total<=18 else "x·ªâu"
        if choice == result:
            users[user_id]["vnd"] += bet
            outcome = f"üéâ Th·∫Øng! +{bet:,} VND"
        else:
            users[user_id]["vnd"] -= bet
            outcome = f"üò¢ Thua! -{bet:,} VND"
        save_data()
        await query.edit_message_text(f"üé≤ K·∫øt qu·∫£ T√†i X·ªâu: {dice} ‚Üí {result}\n{outcome}\nS·ªë d∆∞: {users[user_id]['vnd']:,} VND")
    
    # R√∫t B√†i
    elif game=="rutbai" and data.startswith("rutbai_"):
        choice = data.split("_")[1]
        card = random.randint(1,13)
        result = "cao" if card>7 else "thap"
        if choice == result:
            users[user_id]["vnd"] += bet
            outcome = f"üéâ Th·∫Øng! +{bet:,} VND (R√∫t {card})"
        else:
            users[user_id]["vnd"] -= bet
            outcome = f"üò¢ Thua! -{bet:,} VND (R√∫t {card})"
        save_data()
        await query.edit_message_text(f"{outcome}\nS·ªë d∆∞: {users[user_id]['vnd']:,} VND")

    # Roulette
    elif game=="roulette" and data.startswith("roulette_"):
        choice = data.split("_")[1]
        spin = random.choice(["red","black"])
        if choice == spin:
            users[user_id]["vnd"] += bet
            outcome = f"üéâ Th·∫Øng! +{bet:,} VND ({spin})"
        else:
            users[user_id]["vnd"] -= bet
            outcome = f"üò¢ Thua! -{bet:,} VND ({spin})"
        save_data()
        await query.edit_message_text(f"{outcome}\nS·ªë d∆∞: {users[user_id]['vnd']:,} VND")

    # ƒêua X√∫c X·∫Øc
    elif game=="dauxucxac" and data.startswith("d
