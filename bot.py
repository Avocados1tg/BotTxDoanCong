import logging
import os
import asyncio
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.constants import ChatAction
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# L·∫•y token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng (Railway)
TOKEN = os.environ.get('BOT_TOKEN')
if not TOKEN:
    raise ValueError('BOT_TOKEN kh√¥ng ƒë∆∞·ª£c set! H√£y th√™m v√†o bi·∫øn m√¥i tr∆∞·ªùng.')

# B·∫≠t logging ƒë·ªÉ debug (t√πy ch·ªçn)
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# T√πy ch·ªânh: Danh s√°ch emoji Dice (m·ªü r·ªông: random 3 lo·∫°i)
DICE_EMOJIS = ['üé≤', '‚öΩ', 'üèÄ']

# T√πy ch·ªânh: GIF animation m·ªõi (l·∫Øc 3 dice classic t·ª´ Giphy - kh√°c v·ªõi c√°i c≈©)
CUSTOM_GIF_URL = 'https://media.giphy.com/media/l0HlRnAWXxn0MhKLK/giphy.gif'

# Sticker win/lose (placeholder - thay b·∫±ng file_id th·∫≠t!)
WIN_STICKER = 'CAACAgIAAxkBAAIB...win_celebration_file_id'  # V√≠ d·ª• sticker th·∫Øng
LOSE_STICKER = 'CAACAgIAAxkBAAIB...sad_lose_file_id'  # V√≠ d·ª• sticker thua

# Balance m·∫∑c ƒë·ªãnh
DEFAULT_BALANCE = 100000.0  # 100.000 VND

# Preset amounts cho n√∫t c∆∞·ª£c
PRESET_AMOUNTS = [1000, 5000, 10000, 50000]  # Th√™m/b·ªõt t√πy √Ω

# T·∫°o menu ch√≠nh (ReplyKeyboard)
def get_main_keyboard():
    keyboard = [
        [KeyboardButton("üé≤ Ch∆°i")],
        [KeyboardButton("üí∞ S·ªë d∆∞")],
        [KeyboardButton("üîÑ Reset")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

# T·∫°o n√∫t preset c∆∞·ª£c d·ª±a tr√™n balance
def get_amount_keyboard(balance):
    keyboard = []
    for amt in PRESET_AMOUNTS:
        if amt <= balance:
            keyboard.append([InlineKeyboardButton(f"{amt:,} VND", callback_data=f'amount_{amt}')])
    keyboard.append([InlineKeyboardButton("All-in üí•", callback_data='amount_all')])
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['balance'] = DEFAULT_BALANCE  # Force set ƒë·ªÉ tr√°nh 0
    logging.info(f'Init balance cho user {update.effective_user.id}: {context.user_data["balance"]}')
    reply_markup = get_main_keyboard()
    await update.message.reply_text(
        f'Ch√†o m·ª´ng! Bot TX v·ªõi animation t√πy ch·ªânh ƒë·∫ßy ƒë·ªß (t·ª∑ l·ªá 1:0.9).\nS·ªë d∆∞: {int(context.user_data["balance"]):,} VND üí∞\nB·∫•m n√∫t d∆∞·ªõi ƒë·ªÉ ch∆°i!',
        reply_markup=reply_markup
    )

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'balance' not in context.user_data:
        context.user_data['balance'] = DEFAULT_BALANCE  # Fix n·∫øu thi·∫øu
    balance = context.user_data['balance']
    logging.info(f'Check balance cho user {update.effective_user.id}: {balance}')
    reply_markup = get_main_keyboard()
    await update.message.reply_text(f'S·ªë d∆∞ hi·ªán t·∫°i: {int(balance):,} VND üí∞', reply_markup=reply_markup)

async def reset_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['balance'] = DEFAULT_BALANCE  # Force set
    logging.info(f'Reset balance cho user {update.effective_user.id}: {context.user_data["balance"]}')
    reply_markup = get_main_keyboard()
    await update.message.reply_text(f'ƒê√£ reset s·ªë d∆∞ v·ªÅ {int(DEFAULT_BALANCE):,} VND! üéâ', reply_markup=reply_markup)

async def play(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'balance' not in context.user_data:
        context.user_data['balance'] = DEFAULT_BALANCE
    balance = context.user_data['balance']
    logging.info(f'Play check balance cho user {update.effective_user.id}: {balance}')
    if balance <= 0:
        reply_markup = get_main_keyboard()
        await update.message.reply_text('H·∫øt ti·ªÅn r·ªìi! B·∫•m üîÑ Reset ƒë·ªÉ ch∆°i ti·∫øp.', reply_markup=reply_markup)
        return
    
    # T·∫°o n√∫t Inline cho T√†i/X·ªâu
    keyboard = [
        [InlineKeyboardButton("T√†i üí∞", callback_data='bet_tai')],
        [InlineKeyboardButton("X·ªâu üé≤", callback_data='bet_xiu')]
    ]
    reply_markup_inline = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('Ch·ªçn c∆∞·ª£c c·ªßa b·∫°n:', reply_markup=reply_markup_inline)  # Kh√¥ng c·∫ßn ReplyKeyboard ·ªü ƒë√¢y, s·∫Ω c√≥ ·ªü b∆∞·ªõc sau

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith('bet_'):
        # X·ª≠ l√Ω ch·ªçn T√†i/X·ªâu
        bet = 't√†i' if query.data == 'bet_tai' else 'x·ªâu'
        context.user_data['bet'] = bet
        balance = context.user_data['balance']
        amount_keyboard = get_amount_keyboard(balance)
        reply_markup_main = get_main_keyboard()  # Th√™m n√∫t d∆∞·ªõi cho message edit
        await query.edit_message_text(
            f'B·∫°n ch·ªçn {bet.title()}. Ch·ªçn s·ªë ti·ªÅn c∆∞·ª£c s·∫µn:\nS·ªë d∆∞: {int(balance):,} VND',
            reply_markup=amount_keyboard  # Inline tr√™n
            # ReplyKeyboard d∆∞·ªõi s·∫Ω t·ª± hi·ªán n·∫øu ƒë√£ set tr∆∞·ªõc ƒë√≥, nh∆∞ng ƒë·ªÉ ch·∫Øc, c√≥ th·ªÉ g·ª≠i message ri√™ng n·∫øu c·∫ßn
        )
        # G·ª≠i message ri√™ng v·ªõi ReplyKeyboard ƒë·ªÉ ƒë·∫£m b·∫£o n√∫t d∆∞·ªõi hi·ªán (fix theo ·∫£nh)
        await query.message.reply_text('B·∫•m n√∫t d∆∞·ªõi ƒë·ªÉ ti·∫øp t·ª•c sau khi ch·ªçn c∆∞·ª£c!', reply_markup=reply_markup_main)
    
    elif query.data.startswith('amount_'):
        # X·ª≠ l√Ω ch·ªçn amount
        if not context.user_data.get('bet'):
            await query.answer('Ch∆∞a ch·ªçn T√†i/X·ªâu! B·∫•m /play l·∫°i.')
            return
        
        bet = context.user_data['bet']
        balance = context.user_data['balance']
        
        if query.data == 'amount_all':
            amount = balance
        else:
            amount = float(query.data.split('_')[1])
        
        if amount > balance or amount <= 0:
            await query.answer('S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!')
            return
        
        # Tr·ª´ ti·ªÅn c∆∞·ª£c tr∆∞·ªõc
        context.user_data['balance'] -= amount
        logging.info(f'C∆∞·ª£c {amount} cho user {query.from_user.id}, balance m·ªõi: {context.user_data["balance"]}')
        
        # Text animation: Loading message
        loading_msg = await context.bot.send_message(chat_id=query.message.chat_id, text='‚è≥ ƒêang l·∫Øc... L·∫Øc l·∫Øc! üé≤')
        await asyncio.sleep(2)  # Ch·ªù 2s cho hi·ªáu ·ª©ng
        await loading_msg.delete()  # X√≥a loading
        
        # B·∫Øt ƒë·∫ßu chat action
        await context.bot.send_chat_action(chat_id=query.message.chat_id, action=ChatAction.RECORD_VIDEO)
        
        # GIF t√πy ch·ªânh m·ªõi
        try:
            await context.bot.send_animation(
                chat_id=query.message.chat_id,
                animation=CUSTOM_GIF_URL,
                caption='ƒêang l·∫Øc x√∫c x·∫Øc t√πy ch·ªânh... ‚è≥'
            )
            use_dice = False
            logging.info('GIF m·ªõi g·ª≠i th√†nh c√¥ng')
        except Exception as e:
            logging.info(f'GIF l·ªói: {e}, fallback Dice')
            use_dice = True
        
        if use_dice:
            # Dice animation v·ªõi emoji random m·ªü r·ªông
            dice_values = []
            num_dice = 3  # S·ªë Dice (d·ªÖ ch·ªânh)
            for _ in range(num_dice):
                emoji = random.choice(DICE_EMOJIS)
                dice_msg = await context.bot.send_dice(
                    chat_id=query.message.chat_id,
                    emoji=emoji
                )
                await asyncio.sleep(0.5)  # Delay m∆∞·ª£t
                dice_values.append(dice_msg.dice.value)
        else:
            # Random th·ªß c√¥ng n·∫øu d√πng GIF
            dice_values = [random.randint(1, 6) for _ in range(3)]
        
        total = sum(dice_values)
        result = 'T√†i' if total >= 11 else 'X·ªâu'
        win = (bet == result.lower())
        
        message = f'üé≤ X√∫c x·∫Øc: {dice_values[0]}, {dice_values[1]}, {dice_values[2]}\nT·ªïng: {total}\nK·∫øt qu·∫£: {result}\n'
        reply_markup = get_main_keyboard()
        if win:
            win_amount = amount * 0.9
            context.user_data['balance'] += amount + win_amount  # + g·ªëc + th·∫Øng (1:0.9)
            message += f'B·∫°n th·∫Øng! +{int(win_amount):,} VND\nS·ªë d∆∞ m·ªõi: {int(context.user_data["balance"]):,} VND üéâ'
            # G·ª≠i sticker win
            try:
                await context.bot.send_sticker(chat_id=query.message.chat_id, sticker=WIN_STICKER)
            except Exception:
                logging.info('Sticker win l·ªói, b·ªè qua')
        else:
            message += f'B·∫°n thua! -{int(amount):,} VND\nS·ªë d∆∞ m·ªõi: {int(context.user_data["balance"]):,} VND üòî'
            # G·ª≠i sticker lose
            try:
                await context.bot.send_sticker(chat_id=query.message.chat_id, sticker=LOSE_STICKER)
            except Exception:
                logging.info('Sticker lose l·ªói, b·ªè qua')
        message += '\nB·∫•m n√∫t d∆∞·ªõi ƒë·ªÉ ti·∫øp t·ª•c!'
        
        await query.message.reply_text(message, reply_markup=reply_markup)
        del context.user_data['bet']

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    
    # X·ª≠ l√Ω n√∫t menu ch√≠nh
    if text == "üé≤ Ch∆°i":
        await play(update, context)
    elif text == "üí∞ S·ªë d∆∞":
        await balance(update, context)
    elif text == "üîÑ Reset":
        await reset_balance(update, context)

def main():
    application = Application.builder().token(TOKEN).build()
    
    # Command handlers
    application.add_handler(CommandHandler('start', start))
    
    # Callback cho n√∫t (bet_ v√† amount_)
    application.add_handler(CallbackQueryHandler(button_callback, pattern='^(bet_|amount_)'))
    
    # Message handler cho n√∫t menu
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print('Bot ƒëang ch·∫°y v·ªõi fix balance, n√∫t d∆∞·ªõi ƒë·∫ßy ƒë·ªß v√† GIF m·ªõi...')
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()